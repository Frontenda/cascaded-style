// Generated by CoffeeScript 1.4.0
(function() {
  var _ensureGetMatchedCSSRules, _inspectCSS, _inspectWithGetMatchedCSSRules, _sortBySpecificity;

  $.fn.getMatchedStyle = function() {
    return _inspectCSS($(this));
  };

  _inspectCSS = function(el) {
    _ensureGetMatchedCSSRules();
    try {
      return _inspectWithGetMatchedCSSRules(el);
    } catch (error) {
      return _inspectWithListOfRules(el);
    }
  };

  _ensureGetMatchedCSSRules = function() {
    if (!window.getMatchedCSSRules) {
      return window.getMatchedCSSRules = function(element) {
        var media, result, rule, rules, sheet, sheet_media, style_sheets;
        result = [];
        style_sheets = [].slice.call(document.styleSheets);
        while ((sheet = style_sheets.shift())) {
          sheet_media = sheet.media.mediaText;
          media = [].slice.call(sheet_media);
          if (sheet.disabled) {
            continue;
          }
          if (sheet_media.length && !window.matchMedia(sheet_media).matches) {
            continue;
          }
          rules = [].slice.call(sheet.cssRules);
          while (rule = rules.shift()) {
            if (rule.stylesheet) {
              style_sheets.push(rule.stylesheet);
              continue;
            } else if (rule.media) {
              style_sheets.push(rule);
              continue;
            }
            if (element.mozMatchesSelector(rule.selectorText)) {
              result.push(rule);
            }
          }
        }
        return _sortBySpecificity(result);
      };
    }
  };

  _sortBySpecificity = function(rules) {
    var cmp, getSpec, spec,
      _this = this;
    spec = {};
    getSpec = function(rule) {
      if (spec[rule.selectorText] == null) {
        spec[rule.selectorText] = $.specificity(rule.selectorText);
      }
      return spec[rule.selectorText];
    };
    cmp = function(a, b) {
      return getSpec(a) - getSpec(b);
    };
    rules.sort(cmp);
    return rules;
  };

  _inspectWithGetMatchedCSSRules = function(el) {
    var $el, cssText, matchedRule, matchedRules, name, properties, property, results, sprop, value, _i, _j, _len, _len1, _ref;
    results = {};
    $el = $(el);
    matchedRules = window.getMatchedCSSRules(el, null);
    for (_i = 0, _len = matchedRules.length; _i < _len; _i++) {
      matchedRule = matchedRules[_i];
      properties = {};
      cssText = matchedRule.cssText;
      if (cssText.indexOf('{') > -1) {
        cssText = cssText.match(/{([^}]*)}/)[1];
      }
      _ref = cssText.split(';');
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        property = _ref[_j];
        sprop = property.split(':');
        name = sprop[0];
        properties[name.trim()] = sprop.slice(1).join(':');
      }
      for (property in properties) {
        value = properties[property];
        if (value) {
          results[property] = value;
        }
      }
    }
    return results;
  };

  ({
    _inspectWithListOfRules: function(el, isRoot) {
      var results, style,
        _this = this;
      el = $(el);
      style = el.computedStyle();
      results = {};
      $.each(style, function(key) {
        var property;
        property = style[key];
        if (!_this._includeCssProperty(property)) {
          return;
        }
        return results[property] = style.getPropertyValue(property);
      });
      return results;
    }
  });

}).call(this);
