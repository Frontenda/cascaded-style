// Generated by CoffeeScript 1.4.0
(function() {
  var _filterProperties, _inspect, _inspectCSS, _inspectWithListOfRules, _replaceInherit, _sortBySpecificity;

  $.fn.cascadedStyle = function(options) {
    return _inspectCSS($(this), options);
  };

  _inspectCSS = function(el, options) {
    var func;
    if (options == null) {
      options = {};
    }
    func = window.getMatchedCSSRules;
    if (!(func && !options.polyfill)) {
      func = window.getMatchedCSSRulesPolyfill;
    }
    options["function"] = func;
    return _inspect(el, options);
  };

  window.getMatchedCSSRulesPolyfill = function(element) {
    var fn, result, rule, sheet, sheetMedia, styleSheets, _i, _len, _ref;
    result = [];
    styleSheets = Array.prototype.slice.call(document.styleSheets);
    while (sheet = styleSheets.shift()) {
      sheetMedia = sheet.media.mediaText;
      if (sheet.disabled || !sheet.cssRules) {
        continue;
      }
      if (sheetMedia.length && !window.matchMedia(sheetMedia).matches) {
        continue;
      }
      _ref = sheet.cssRules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        if (rule.stylesheet) {
          styleSheets.push(rule.stylesheet);
          continue;
        } else if (rule.media) {
          styleSheets.push(rule);
          continue;
        }
        fn = element.matchesSelector || element.mozMatchesSelector || element.webkitMatchesSelector;
        if (fn.call(element, rule.selectorText)) {
          result.push(rule);
        }
      }
    }
    return _sortBySpecificity(result);
  };

  _sortBySpecificity = function(rules) {
    var cmp, getSpec, spec,
      _this = this;
    spec = {};
    getSpec = function(rule) {
      if (spec[rule.selectorText] == null) {
        spec[rule.selectorText] = $.specificity(rule.selectorText);
      }
      return spec[rule.selectorText];
    };
    cmp = function(a, b) {
      return getSpec(a) - getSpec(b);
    };
    rules.sort(cmp);
    return rules;
  };

  _inspect = function(el, options) {
    var $el, cssText, important, isImportant, matchedRule, matchedRules, name, properties, property, results, sprop, value, _i, _j, _len, _len1, _ref;
    if (options == null) {
      options = {};
    }
    if (!options["function"]) {
      options["function"] = window.getMatchedCSSRules;
    }
    results = {};
    important = {};
    $el = $(el);
    matchedRules = options["function"].call(window, $el[0], null);
    matchedRules = Array.prototype.slice.call(matchedRules);
    matchedRules.push({
      cssText: $el.attr('style') || ''
    });
    for (_i = 0, _len = matchedRules.length; _i < _len; _i++) {
      matchedRule = matchedRules[_i];
      properties = {};
      cssText = matchedRule.cssText;
      if (cssText.indexOf('{') > -1) {
        cssText = cssText.match(/{([^}]*)}/)[1];
      }
      _ref = cssText.split(';');
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        property = _ref[_j];
        sprop = property.split(':');
        name = sprop[0].trim();
        value = sprop.slice(1).join(':').trim();
        isImportant = /\!\s*important/g.test(value);
        if (isImportant) {
          value = value.replace(/\!\s*important/g, '').trim();
          important[name] = true;
        }
        if ((isImportant && important[name]) || !important[name]) {
          properties[name] = value;
        }
      }
      for (property in properties) {
        value = properties[property];
        if (value) {
          results[property] = value;
        }
      }
    }
    if (options.properties) {
      results = _filterProperties(el, results, options.properties);
    }
    if (options.replaceInherit) {
      results = _replaceInherit(el, results);
    }
    return results;
  };

  _filterProperties = function(el, css, properties) {
    var prop, results, style, _i, _len;
    if (!(properties && properties.length)) {
      return css;
    }
    style = el.computedStyle();
    results = {};
    for (_i = 0, _len = properties.length; _i < _len; _i++) {
      prop = properties[_i];
      results[prop] = prop in css ? css[prop] : style[prop];
    }
    return results;
  };

  _replaceInherit = function(el, css) {
    var prop, style, value;
    style = el.computedStyle();
    for (prop in css) {
      value = css[prop];
      if (value.indexOf('inherit') === 0) {
        css[prop] = style[prop];
      }
    }
    return css;
  };

  _inspectWithListOfRules = function(el, isRoot) {
    var results, style,
      _this = this;
    el = $(el);
    style = el.computedStyle();
    results = {};
    $.each(style, function(key) {
      var property;
      property = style[key];
      if (!_this._includeCssProperty(property)) {
        return;
      }
      return results[property] = style.getPropertyValue(property);
    });
    return results;
  };

}).call(this);
